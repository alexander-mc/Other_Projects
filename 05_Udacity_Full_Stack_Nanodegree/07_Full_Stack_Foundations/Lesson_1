Lesson 1 Notes

1) CRUD -- All actions a user does on a user driven website
	Create
	Read
	Update
	Delete

2) Object-Relational Mapping (ORMs) - Acts as a translator, converting code from one language to another. For instance, and ORM takes python code and converts it into a SQL statement. It also gets results from a database, and allows us to use it as an object in python code.

3) SQL Alchemy is an open source ORM for python.

4) Creating a database with sql alchemy has 4 major coding components:

	configuration code = used to import modules
		sets dependencies for database
		binds code to sql alchemy engine
		generally shouldn't change from project to project
		at beginning of file:
			imports all modules needed
			creates instance of class called declarative base
		at end of file:
			creates (or connects) the database and adds tables and columns

	class code = represents data in python
		the object-oriented representation (python class) of a table in our database
		can be used to extend the Base class from sql alchemy (see database_setup.py file)
		inside of this class declaration, we will add all code from table and mapper code
		class names START W/A CAPITAL LETTER

	table = represents table in database
		inside each of clases, we must create a representation of the table inside the database
		we use the special variable name __tablename__ to let sql alchemy know the variable that we will use to refer to the table
			syntax:
			__tablename__ = 'some_table' 
		table names ARE LOWERCASE

	mapper = connects column of table to class that represents it
		creates variables that we will use to create columns in our database
		syntax:
			columnName = Column(attributes)
		example attributes:
			string(250)
			integer
			relationship(Class) <- tells sql alchemy the type of relationship one table has to another
			nullable = False <- indicates that a column entry must have a value in order for row to be created
			primary_key = True
			ForeignKey('some_table.id')

5) To insert rows into a database from python, type the following commands:

	>>> from sqlalchemy import create_engine
	>>> from sqlalchemy.orm import sessionmaker
	>>> from database_setup import Base, Restaurant, MenuItem        <-- database_setup is a .py file in which there are the classes Base, Restaurant, and MenuItem
	>>> engine = create_engine('sqlite:///restaurantmenu.db')
	>>> Base.metadata.bind = engine
	>>> DBSession = sessionmaker(bind = engine)
	>>> session = DBSession()
	>>> myFirstRestaurant = Restaurant(name = "Pizza Palace")        <-- in the table restaurant, creates a row for a restaurant named "Pizza Palace" and stores it in the variable myFristRestaurant
	>>> session.add(myFirstRestaurant)
	>>> session.commit()
	>>> session.query(Restaurant).all()              <-- shows all data in the table
	[<database_setup.Restaurant object at 0xb6a85fcc>]

	Similarly:

	>>> cheesepizza = MenuItem(name = "Cheese Pizza",
		description = "Made with all natural ingredients and fresh mozzarella",
		course = "Entree",
		price = "8.99",
		restaurant = myFirstRestaurant               <-- creates a foreign key object 'restaurant' that species a relationship with myFirstRestaurant
	>>> session.add(cheesepizza)
	>>> session.commit

6) Looks at first result in a table:

	>>> firstResult = session.query(Restaurant).first()
	>>> firstResult.name

7) Look at all data in a table:

	>>> session.query(Restaurant).all()

8) Look at data in a column:

	>>> items = session.query(MenuItem).all()
	>>> for item in items:
	...     print item.name
	<press enter>
	<press enter>

	Similarly:

	>>> items = session.query(MenuItem).all()
	>>> for item in items:
	...     print item.price
	<press enter>
	<press enter>

	Similarly:

	>>> UrbanVeggieBurger = session.query(MenuItem).filter_by(id = 2).one()
	>>> print UrbanVeggieBurger.price

9) Filter a column:

	>>> veggieBurgers = session.query(MenuItem).filter_by(name = 'Veggie Burger')
	>>> for veggieBurger in veggieBurgers:
	...     print veggieBurger.id
	...     print veggieBurger.price
	...     print veggieBurger.restaurant.name
	...     print "\n"

	Similarly:

	>>> UrbanVeggieBurger = session.query(MenuItem).filter_by(id = 2).one()
	>>> print UrbanVeggieBurger.price

10) Update a value:

	>>> UrbanVeggieBurger = session.query(MenuItem).filter_by(id = 2).one()
	>>> UrbanVeggieBurger.price = '$2.99'
	>>> session.add(UrbanVeggieBurger)
	>>> session.commit()

11) Update multiple values:

	>>> for veggieBurger in veggieBurgers:
	...     if veggieBurger.price != '$2.99':
	...             veggieBurger.price = '$2.99'
	...             session.add(veggieBurger)
	...             session.commit()

12) Delete an entry:

	>>> spinach = session.query(MenuItem).filter_by(name = 'Spinach Ice Cream').one()
	>>> session.delete(spinach)
	>>> session.commit()



